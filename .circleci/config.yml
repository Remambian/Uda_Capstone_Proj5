version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  linting-html:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run:
          name: Install Dependencies 
          command: |
            sudo npm install 
            sudo npm install -g htmlhint
      - run:
          name: HTML Linting
          command: sudo npm run lint:html
  build-upload-image:
    docker:
      - image: circleci/node:14 
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build Docker Image 
          command: sudo docker build -t remambian/capstoneblue:latest .
      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Push to Docker Hub
          command: docker push remambian/capstoneblue:latest

  deploy-infrastructure:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - run:
          name: Install eksctl
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download          
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ""
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ""

  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster 
        type: string  
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.json
          resource-name: service/capstonebluegreenlb

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string  
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.json
          resource-name: deployment/capstoneblue


workflows:
  default:
    jobs:
      - linting-html        
      - build-upload-image:
          requires:
            - linting-html
      - deploy-infrastructure:
          cluster-name: capstone-project-cluster
          requires:
            - build-upload-image
      - create-service:
          cluster-name: capstone-project-cluster
          requires:
            - deploy-infrastructure
      - create-deployment: 
          cluster-name: capstone-project-cluster
          requires:
            - create-service
      - aws-eks/update-container-image:
          cluster-name: capstone-project-cluster
          container-image-updates: "capstoneblue=deployment.json:latest"
          record: true
          requires:
            - create-deployment
          resource-name: deployment/capstoneblue


